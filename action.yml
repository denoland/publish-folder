name: 'deno.land/x - Publish Folder'
description: 'Publishes a folder to the deno.land/x registry.'
inputs:
  folder:
    description: 'Folder in your directory to publish (ex. dist)'
    required: true
  token:
    description: 'A GitHub token with push permissions to your repository'
    required: true
  branch:
    description: 'Branch name to publish to'
    default: 'build'
  tag:
    description: 'Tag to publish'
    required: false
  git-user-name:
    description: 'Git user.name to use when committing'
    required: false
  git-user-email:
    description: 'Git user.email to use when committing'
    required: false
runs:
  using: "composite"
  steps:
    - name: Ensure current branch not publish branch
      shell: bash
      run: |
        CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
        if [ $CURRENT_BRANCH == "${{ inputs.branch }}" ]; then
          echo "The current branch ($CURRENT_BRANCH) was the same as the output branch (${{ inputs.branch }})."
          echo "Perhaps you're accidentally copying the GitHub Actions workflow file to the output branch?"
          exit 1
        fi
    - name: Publish folder '${{ inputs.folder }}' to branch '${{ inputs.branch }}'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        CURRENT_SHA=$(git rev-parse HEAD)
        echo "Publishing $CURRENT_SHA"
        FOLDER=$(realpath '${{ inputs.folder }}')
        echo "Publish dir: $FOLDER"
        TEMP_DIR="${{ runner.temp }}/deno-x-publish"
        git config --add safe.directory $TEMP_DIR
        USER_NAME='${{ inputs.git-user-name != '' && inputs.git-user-name || 'github-actions' }}'
        USER_EMAIL='${{ inputs.git-user-email != '' && inputs.git-user-email || 'github-actions@github.com' }}'

        echo "Creating temp dir $TEMP_DIR"
        mkdir -p $TEMP_DIR
        REPO_URL='https://github.com/${{ github.repository }}/'
        AUTH=$(echo -n "$USER_NAME:$GITHUB_TOKEN" | openssl base64 | tr -d '\n')

        echo "Cloning repo..."
        cd $TEMP_DIR
        git -c http.$REPO_URL.extraheader="Authorization: Basic $AUTH" clone --no-checkout $REPO_URL .

        echo Setting up repo...
        git config user.name $USER_NAME
        git config user.email $USER_EMAIL
        git config http.$REPO_URL.extraheader "Authorization: Basic $AUTH"

        if git ls-remote --exit-code $REPO_URL '${{ inputs.branch}}'; then
          git fetch origin '${{ inputs.branch }}'
          echo "Checking out branch '${{ inputs.branch }}' from $REPO_URL..."
          git checkout ${{ inputs.branch }}
        else
          echo "Creating orphan branch '${{ inputs.branch }}' for $REPO_URL..."
          git checkout --orphan ${{ inputs.branch }}
        fi

        # Handles multiple runners pushing to the branch at the same time.
        # The order is not that important, so just create a new commit
        # on top of whatever is first.
        MAX_RETRIES=5
        RETRIES=0
        while true; do
          echo Cleaning repo...
          git rm --ignore-unmatch -rf .

          echo Copying files...
          # use rsync because it works on windows runners and provides progress
          rsync -av --progress $FOLDER/ $TEMP_DIR --exclude '.git'

          echo Pushing changes...
          git add .
          git commit --allow-empty -m "Publish $CURRENT_SHA"

          if git push --set-upstream origin "${{ inputs.branch }}"; then
            break
          fi

          # Check if we should retry
          RETRIES=$((RETRIES + 1))
          echo "Retry count: $RETRIES"

          if [ $RETRIES -eq $MAX_RETRIES ]; then
            echo "Failed to push changes after $MAX_RETRIES retries."
            echo ""
            echo "If this is failing due to authentication issues, make sure "\
              "that either 'Read and write' workflow permissions are enabled "\
              "in Settings > Actions > General > Workflow permissions or that "\
              "the specified token has permission to push to the "\
              "'${{ inputs.branch }}' branch."
            exit 1
          fi

          echo "Push failed. Retrying with the latest changes..."
          sleep 0.2
          # fetch the latest remote code and reset the branch
          git fetch origin "${{ inputs.branch }}"
          git reset --hard origin/"${{ inputs.branch }}"
        done

        if [ "${{ inputs.tag }}" == "" ]; then
          echo "Skipping tag since none specified."
        else
          echo "Publishing tag '${{ inputs.tag }}'..."
          git tag ${{ inputs.tag }} ${{ inputs.branch }}
          git push origin ${{ inputs.tag }}
        fi
